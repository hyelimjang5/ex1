class parsingXML{
	//엘리먼트를 생성하기 위한 변수
	Document docNew = null;
	Element row = null;
	Element rootElement = null;
	NodeList nList2 = null;
	NodeList nList3 = null;
	Element eElement2 = null;
	
	public parsingXML() {
		File f = null;
		try {

			f = new File("C:\\\\Users\\1911\\Desktop\\hyelim\\quiz\\1.XML 파일 분석\\T_BASEFILE_TB.xml");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(f);
			doc.getDocumentElement().normalize();

			NodeList nList = doc.getElementsByTagName("ROW");

			for (int temp = 0; temp < nList.getLength(); temp++) {

				// 루트 엘리먼트
				docNew = dBuilder.newDocument();
				rootElement = docNew.createElement("TABLE");
				docNew.appendChild(rootElement);

				Node nNode = nList.item(temp);

				Element eElement = (Element) nNode;

				f = new File("C:\\Users\\1911\\Desktop\\hyelim\\quiz\\1.XML 파일 분석\\F_"
						+ getTagValue("FILE_ID", eElement) + "_TB.xml");
				doc = dBuilder.parse(f);
				nList2 = doc.getElementsByTagName("ROW");

				f = new File("C:\\Users\\1911\\Desktop\\hyelim\\quiz\\1.XML 파일 분석\\P_"
						+ getTagValue("FILE_ID", eElement) + "_TB.xml");
				doc = dBuilder.parse(f);
				nList3 = doc.getElementsByTagName("ROW");

				// T_BASEFILE_TB.xml FILE_ID 에 해당하는 F_{FILE_ID}_TB,
				// P_{FILE_ID}_TB 파일 접근
				findF_N_TB();

				// XML 파일로 쓰기
				TransformerFactory transformerFactory = TransformerFactory.newInstance();
				Transformer transformer = transformerFactory.newTransformer();

				transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
				transformer.setOutputProperty(OutputKeys.INDENT, "yes");
				DOMSource source = new DOMSource(docNew);
				StreamResult result = new StreamResult(
						new FileOutputStream(new File("C:\\Users\\1911\\Desktop\\hyelim\\quiz\\ex1_result\\T_"
								+ getTagValue("FILE_ID", eElement) + "_TB.xml")));

				// 파일로 쓰지 않고 콘솔에 찍어보고 싶을 경우 다음을 사용 (디버깅용)
				// StreamResult result = new StreamResult(System.out);

				transformer.transform(source, result);

			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			System.out.println("File saved!");
		}
	}

	// T_BASEFILE_TB.xml FILE_ID 에 해당하는 F_{FILE_ID}_TB 파일 접근
	private void findF_N_TB() {
		for (int i = 0; i < nList2.getLength(); i++) {
			Node nNode2 = nList2.item(i);

			eElement2 = (Element) nNode2;

			// SIMILAR_RATE가 5000보다 큰 데이터 찾기
			if (Integer.parseInt(getTagValue("SIMILAR_RATE", eElement2)) / 100 > 50) {
				// ROWS 엘리먼트
				row = docNew.createElement("ROW");
				rootElement.appendChild(row);

				// 엘리먼트 생성 함수
				createEle("ROWID", "ROWID", eElement2);
				createEle("VOLUME", "VOLUME", eElement2);
				createEle("FILE_NAME", "FILE_NAME", eElement2);
				createEle("RELEASE_NAME", "RELEASE_NAME", eElement2);
				createEle("SIMILAR_RATE", "SIMILAR_RATE", eElement2);
				createEle("FILE_PATH", "FILE_PATH", eElement2);
				createEle("P_ID", "P_ID", eElement2);
				createEle("EXCLUSION", "EXCLUSION", eElement2);

				findP_N_TB();

			}

		}
	}

	// T_BASEFILE_TB.xml FILE_ID 에 해당하는 P_{FILE_ID}_TB 파일 접근
	private void findP_N_TB() {
		for (int j = 0; j < nList3.getLength(); j++) {
			Node nNode3 = nList3.item(j);

			Element eElement3 = (Element) nNode3;

			// P_ID같은거 찾기
			if (getTagValue("P_ID", eElement2).equals(getTagValue("P_ID", eElement3))) {
				// COMMENT 엘리먼트에 LICENSE_ID값 넣기
				createEle("COMMENT", "LICENSE_ID", eElement3);
			}
		}
	}

	// 엘리먼트 생성
	private void createEle(String sTag, String cTag, Element eElement) {
		Element e = docNew.createElement(sTag);
		e.appendChild(docNew.createTextNode(getTagValue(cTag, eElement)));
		row.appendChild(e);
	}

	// 태그이름에 해당하는 값 반환
	private String getTagValue(String sTag, Element eElement) {
		NodeList nlList = eElement.getElementsByTagName(sTag).item(0).getChildNodes();

		Node nValue = (Node) nlList.item(0);

		if (nValue == null) {
			return "";
		}
		return nValue.getNodeValue();
	}
}
